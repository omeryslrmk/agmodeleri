DÜĞÜMLERİ VERİLEN GRAFTA MİNİMMUM YAYILAN AĞACI BULMA
import heapq

def kruskal(graph):
    # Kenarları ağırlıklarına göre sırala
    edges = sorted(graph, key=lambda x: x[2])

    parent = {}
    rank = {}

    def find(node):
        if parent[node] != node:
            parent[node] = find(parent[node])  # Path compression
        return parent[node]

    def union(node1, node2):
        root1 = find(node1)
        root2 = find(node2)

        if root1 != root2:
            if rank[root1] > rank[root2]:
                parent[root2] = root1
            elif rank[root1] < rank[root2]:
                parent[root1] = root2
            else:
                parent[root2] = root1
                rank[root1] += 1

    # Minimum yayılan ağacı oluşturmak için
    mst = []

    # Tüm düğümleri başlangıçta kendi ebeveynine ayarla
    for edge in edges:
        u, v, weight = edge
        if u not in parent:
            parent[u] = u
            rank[u] = 0
        if v not in parent:
            parent[v] = v
            rank[v] = 0

        # Eğer iki düğüm farklı kümelerdeyse, onları birleştir
        if find(u) != find(v):
            union(u, v)
            mst.append(edge)

    return mst

# Kenarları (başlangıç, bitiş, ağırlık) olarak tanımla
graph = [
    ('a', 'b', 4),
    ('a', 'c', 2),
    ('b', 'c', 5),
    ('b', 'd', 10),
    ('c', 'd', 3),
    ('c', 'e', 8),
    ('d', 'e', 4),
    ('d', 'f', 66),
    ('e', 'f', 1)
]

# Minimum yayılan ağacı bul
mst = kruskal(graph)

# Sonuçları yazdır
print("Minimum Yayılan Ağaç:")
for edge in mst:
    print(edge)