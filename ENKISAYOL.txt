VERİLEN BİR GRAF NOKTALIRINDA SEÇİLEN DÜĞÜMÜN DİĞER DÜĞÜMLERE EN KISA UZAKLIKLARI

import heapq

def dijkstra(graph, start):
    # En kısa yolları saklayacak sözlük
    shortest_paths = {node: float('inf') for node in graph}
    shortest_paths[start] = 0

    # Öncelik sırası için bir min-heap
    priority_queue = [(0, start)]

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        # Eğer bir düğüm için şu anki mesafe daha büyükse, devam et
        if current_distance > shortest_paths[current_node]:
            continue

        for neighbor, weight in graph[current_node]:
            distance = current_distance + weight

            # Daha kısa bir yol bulunduysa güncelle
            if distance < shortest_paths[neighbor]:
                shortest_paths[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))

    return shortest_paths

# Grafiği tanımlama
graph = {
    'a': [('b', 6), ('d', 1)],
    'b': [('c', 5), ('e', 2)],
    'c': [('f', 8)],
    'd': [('b', 2), ('e', 6)],
    'e': [('f', 3)],
    'f': []
}

# Başlangıç düğümünü belirleyin
start_node = 'a'

# En kısa yolları hesapla
shortest_paths = dijkstra(graph, start_node)

# Sonuçları yazdır
for node, distance in shortest_paths.items():
    print(f"En kısa mesafe {start_node} -> {node}: {distance}")